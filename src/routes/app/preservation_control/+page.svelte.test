<script>
	import {Icon} from '@steeze-ui/svelte-icon'
	import {InformationCircle} from '@steeze-ui/heroicons'
   import { Modal, Input } from '$lib/components'

   import {nextPreservation, dateFormat, DTG} from '$lib/utils.js'
	import Select from '../../../lib/components/Select.svelte';

   import {readable} from 'svelte/store'
   import {createTable, Subscribe, Render, } from 'svelte-headless-table'
   import {addSortBy, addColumnOrder} from 'svelte-headless-table/plugins'

   export let data
   let { preservation } = data

   let optionDuration = [{
                           value: '90',
                           selected: false,
                           name: '90 Days'
                        },
                        {
                           value: '180',
                           selected: false,
                           name: '180 Days'
                        },
                        {
                           value: '360',
                           selected: false,
                           name: '360 Days'
                        }]


   const table = createTable(readable(preservation), {
    sort: addSortBy({ disableMultiSort: true }),
    colOrder: addColumnOrder(),
  })
   const columns = table.createColumns([
      table.column({
         header: 'No.',
         accessor: 1,
         cell: ({value}) => {
            let index = 1
            return value
         }
      }),
      table.column({
         header: 'Family',
         accessor: 'family'
      }),
      table.column({
         header: 'Model',
         accessor: 'model'
      }),
      table.column({
         header: 'Config',
         accessor: 'config'
      }),
      table.column({
         header: 'Customer',
         accessor: 'customer'
      }),
      // table.column({
      //    header: 'Family',
      //    accessor: 'family'
      // }),
      // table.column({
      //    header: 'Family',
      //    accessor: 'family'
      // })
   ])
   const {
   headerRows,
   rows,
   tableAttrs,
   tableBodyAttrs,
   } = table.createViewModel(columns);
</script>

<div class="px-2 md:w-full">
	<div class="w-full">
		<h1 class="text-center text-3xl font-extrabold uppercase md:text-5xl">Official Dashboard</h1>
		<h1 class="text-center text-lg font-extrabold md:text-3xl">Engine Preservation Control</h1>
	</div>

   <div class="space-y-2">
      <div class="flex justify-end">
         <Icon src={InformationCircle} theme="solid" class='w-5 h-5'/>
         <p class="italic pl-1">Table for all instance</p>
      </div>
      <div class="flex space-x-4">
         <div class="flex justify-center items-center w-[50vh] h-[80vh] bg-slate-700 rounded-lg p-3">
            <div class="stats stats-vertical shadow">
  
               <div class="stat">
                  <div class="stat-figure text-secondary">
                     <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="inline-block w-8 h-8 stroke-current"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path></svg>
                   </div>
                 <div class="stat-title">Overdue</div>
                 <div class="stat-value">1 EA</div>
                 <div class="stat-desc">Click button below to see the detail.</div>
                 <div class="stat-actions">
                  <button class="btn btn-sm btn-success">Details</button>
                </div>
               </div>
               
               <div class="stat">
                  <div class="stat-figure text-secondary">
                     <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="inline-block w-8 h-8 stroke-current"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
                   </div>
                 <div class="stat-title">Nextdue</div>
                 <div class="stat-value">1 EA</div>
                 <div class="stat-desc">Click button below to see the detail.</div>
                 <div class="stat-actions">
                  <button class="btn btn-sm btn-success">Details</button>
                </div>
               </div>
               
               <div class="stat">
                 <div class="stat-title">Total Engine Monitor</div>
                 <div class="stat-value">37 EA</div>
                 <div class="stat-desc"></div>
               </div>
               
             </div>
         </div> 
         <div class="overflow-x-auto w-full h-[80vh]">
            <table {...$tableAttrs} class="table table-zebra w-full">
            <!-- head -->
            <thead class="sticky top-0 bg-slate-700">
               {#each $headerRows as headerRow (headerRow.id)}
                  <Subscribe rowAttrs={headerRow.attrs()} let:rowAttrs>
                  <tr {...rowAttrs}>
                     {#each headerRow.cells as cell (cell.id)}
                        <Subscribe attrs={cell.attrs()} let:attrs>
                        <th {...attrs}>
                           <Render of={cell.render()} />
                        </th>
                        </Subscribe>
                     {/each}
                  </tr>
                  </Subscribe>
               {/each}
            </thead>
            <tbody {...$tableBodyAttrs}>
               {#each $rows as row (row.id)}
                  <Subscribe rowAttrs={row.attrs()} let:rowAttrs>
                  <tr {...rowAttrs}>
                     {#each row.cells as cell (cell.id)}
                        <Subscribe attrs={cell.attrs()} let:attrs>
                        <td {...attrs}>
                           <Render of={cell.render()} />
                        </td>
                        </Subscribe>
                     {/each}
                  </tr>
                  </Subscribe>
               {/each}
            </tbody>
            </table>
         </div> 
      </div>
   </div>

</div>

